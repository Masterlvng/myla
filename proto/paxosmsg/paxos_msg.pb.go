// Code generated by protoc-gen-gogo.
// source: paxos_msg.proto
// DO NOT EDIT!

/*
	Package paxosmsg is a generated protocol buffer package.

	It is generated from these files:
		paxos_msg.proto

	It has these top-level messages:
		Header
		PaxosMsg
		CheckpointMsg
		AcceptorStateData
		PaxosNodeInfo
		SystemVariables
		MasterVariables
		PaxosValue
		BatchPaxosValues
*/
package paxosmsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Gid              uint64 `protobuf:"varint,1,req,name=gid" json:"gid"`
	Rid              uint64 `protobuf:"varint,2,req,name=rid" json:"rid"`
	Cmdid            int32  `protobuf:"varint,3,req,name=cmdid" json:"cmdid"`
	Version          int32  `protobuf:"varint,4,opt,name=version" json:"version"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{0} }

type PaxosMsg struct {
	MsgType             int32  `protobuf:"varint,1,req,name=MsgType" json:"MsgType"`
	InstanceID          uint64 `protobuf:"varint,2,opt,name=InstanceID" json:"InstanceID"`
	NodeID              uint64 `protobuf:"varint,3,opt,name=NodeID" json:"NodeID"`
	ProposalID          uint64 `protobuf:"varint,4,opt,name=ProposalID" json:"ProposalID"`
	ProposalNodeID      uint64 `protobuf:"varint,5,opt,name=ProposalNodeID" json:"ProposalNodeID"`
	Value               []byte `protobuf:"bytes,6,opt,name=Value" json:"Value,omitempty"`
	PreAcceptID         uint64 `protobuf:"varint,7,opt,name=PreAcceptID" json:"PreAcceptID"`
	PreAcceptNodeID     uint64 `protobuf:"varint,8,opt,name=PreAcceptNodeID" json:"PreAcceptNodeID"`
	RejectByPromiseID   uint64 `protobuf:"varint,9,opt,name=RejectByPromiseID" json:"RejectByPromiseID"`
	NowInstanceID       uint64 `protobuf:"varint,10,opt,name=NowInstanceID" json:"NowInstanceID"`
	MinChosenInstanceID uint64 `protobuf:"varint,11,opt,name=MinChosenInstanceID" json:"MinChosenInstanceID"`
	LastChecksum        uint32 `protobuf:"varint,12,opt,name=LastChecksum" json:"LastChecksum"`
	Flag                uint32 `protobuf:"varint,13,opt,name=Flag" json:"Flag"`
	SystemVariables     []byte `protobuf:"bytes,14,opt,name=SystemVariables" json:"SystemVariables,omitempty"`
	MasterVariables     []byte `protobuf:"bytes,15,opt,name=MasterVariables" json:"MasterVariables,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *PaxosMsg) Reset()                    { *m = PaxosMsg{} }
func (m *PaxosMsg) String() string            { return proto.CompactTextString(m) }
func (*PaxosMsg) ProtoMessage()               {}
func (*PaxosMsg) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{1} }

type CheckpointMsg struct {
	MsgType              int32   `protobuf:"varint,1,req,name=MsgType" json:"MsgType"`
	NodeID               uint64  `protobuf:"varint,2,req,name=NodeID" json:"NodeID"`
	Flag                 int32   `protobuf:"varint,3,opt,name=Flag" json:"Flag"`
	UUID                 uint64  `protobuf:"varint,4,req,name=UUID" json:"UUID"`
	Sequence             uint64  `protobuf:"varint,5,req,name=Sequence" json:"Sequence"`
	CheckpointInstanceID uint64  `protobuf:"varint,6,opt,name=CheckpointInstanceID" json:"CheckpointInstanceID"`
	Checksum             uint32  `protobuf:"varint,7,opt,name=Checksum" json:"Checksum"`
	FilePath             *string `protobuf:"bytes,8,opt,name=FilePath" json:"FilePath,omitempty"`
	SMID                 int32   `protobuf:"varint,9,opt,name=SMID" json:"SMID"`
	Offset               uint64  `protobuf:"varint,10,opt,name=Offset" json:"Offset"`
	Buffer               []byte  `protobuf:"bytes,11,opt,name=Buffer" json:"Buffer,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *CheckpointMsg) Reset()                    { *m = CheckpointMsg{} }
func (m *CheckpointMsg) String() string            { return proto.CompactTextString(m) }
func (*CheckpointMsg) ProtoMessage()               {}
func (*CheckpointMsg) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{2} }

type AcceptorStateData struct {
	InstanceID       uint64 `protobuf:"varint,1,req,name=InstanceID" json:"InstanceID"`
	PromiseID        uint64 `protobuf:"varint,2,req,name=PromiseID" json:"PromiseID"`
	PromiseNodeID    uint64 `protobuf:"varint,3,req,name=PromiseNodeID" json:"PromiseNodeID"`
	AcceptedID       uint64 `protobuf:"varint,4,req,name=AcceptedID" json:"AcceptedID"`
	AcceptedNodeID   uint64 `protobuf:"varint,5,req,name=AcceptedNodeID" json:"AcceptedNodeID"`
	AcceptedValue    []byte `protobuf:"bytes,6,req,name=AcceptedValue" json:"AcceptedValue,omitempty"`
	Checksum         uint32 `protobuf:"varint,7,req,name=Checksum" json:"Checksum"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AcceptorStateData) Reset()                    { *m = AcceptorStateData{} }
func (m *AcceptorStateData) String() string            { return proto.CompactTextString(m) }
func (*AcceptorStateData) ProtoMessage()               {}
func (*AcceptorStateData) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{3} }

type PaxosNodeInfo struct {
	Rid              uint64 `protobuf:"varint,1,req,name=Rid" json:"Rid"`
	Nodeid           uint64 `protobuf:"varint,2,req,name=Nodeid" json:"Nodeid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PaxosNodeInfo) Reset()                    { *m = PaxosNodeInfo{} }
func (m *PaxosNodeInfo) String() string            { return proto.CompactTextString(m) }
func (*PaxosNodeInfo) ProtoMessage()               {}
func (*PaxosNodeInfo) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{4} }

type SystemVariables struct {
	Gid              uint64           `protobuf:"varint,1,req,name=Gid" json:"Gid"`
	MemberShip       []*PaxosNodeInfo `protobuf:"bytes,2,rep,name=MemberShip" json:"MemberShip,omitempty"`
	Version          uint64           `protobuf:"varint,3,req,name=Version" json:"Version"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SystemVariables) Reset()                    { *m = SystemVariables{} }
func (m *SystemVariables) String() string            { return proto.CompactTextString(m) }
func (*SystemVariables) ProtoMessage()               {}
func (*SystemVariables) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{5} }

type MasterVariables struct {
	MasterNodeid     uint64 `protobuf:"varint,1,req,name=MasterNodeid" json:"MasterNodeid"`
	Version          uint64 `protobuf:"varint,2,req,name=Version" json:"Version"`
	LeaseTime        uint32 `protobuf:"varint,3,req,name=LeaseTime" json:"LeaseTime"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MasterVariables) Reset()                    { *m = MasterVariables{} }
func (m *MasterVariables) String() string            { return proto.CompactTextString(m) }
func (*MasterVariables) ProtoMessage()               {}
func (*MasterVariables) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{6} }

type PaxosValue struct {
	SMID             int32  `protobuf:"varint,1,req,name=SMID" json:"SMID"`
	Value            []byte `protobuf:"bytes,2,req,name=Value" json:"Value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PaxosValue) Reset()                    { *m = PaxosValue{} }
func (m *PaxosValue) String() string            { return proto.CompactTextString(m) }
func (*PaxosValue) ProtoMessage()               {}
func (*PaxosValue) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{7} }

type BatchPaxosValues struct {
	Values           []*PaxosValue `protobuf:"bytes,1,rep,name=Values" json:"Values,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *BatchPaxosValues) Reset()                    { *m = BatchPaxosValues{} }
func (m *BatchPaxosValues) String() string            { return proto.CompactTextString(m) }
func (*BatchPaxosValues) ProtoMessage()               {}
func (*BatchPaxosValues) Descriptor() ([]byte, []int) { return fileDescriptorPaxosMsg, []int{8} }

func init() {
	proto.RegisterType((*Header)(nil), "paxosmsg.Header")
	proto.RegisterType((*PaxosMsg)(nil), "paxosmsg.PaxosMsg")
	proto.RegisterType((*CheckpointMsg)(nil), "paxosmsg.CheckpointMsg")
	proto.RegisterType((*AcceptorStateData)(nil), "paxosmsg.AcceptorStateData")
	proto.RegisterType((*PaxosNodeInfo)(nil), "paxosmsg.PaxosNodeInfo")
	proto.RegisterType((*SystemVariables)(nil), "paxosmsg.SystemVariables")
	proto.RegisterType((*MasterVariables)(nil), "paxosmsg.MasterVariables")
	proto.RegisterType((*PaxosValue)(nil), "paxosmsg.PaxosValue")
	proto.RegisterType((*BatchPaxosValues)(nil), "paxosmsg.BatchPaxosValues")
}
func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Gid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Rid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Cmdid))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Version))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaxosMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.MsgType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.InstanceID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.NodeID))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.ProposalID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.ProposalNodeID))
	if m.Value != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPaxosMsg(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.PreAcceptID))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.PreAcceptNodeID))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.RejectByPromiseID))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.NowInstanceID))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.MinChosenInstanceID))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.LastChecksum))
	dAtA[i] = 0x68
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Flag))
	if m.SystemVariables != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintPaxosMsg(dAtA, i, uint64(len(m.SystemVariables)))
		i += copy(dAtA[i:], m.SystemVariables)
	}
	if m.MasterVariables != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintPaxosMsg(dAtA, i, uint64(len(m.MasterVariables)))
		i += copy(dAtA[i:], m.MasterVariables)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckpointMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.MsgType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.NodeID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Flag))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.UUID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Sequence))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.CheckpointInstanceID))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Checksum))
	if m.FilePath != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPaxosMsg(dAtA, i, uint64(len(*m.FilePath)))
		i += copy(dAtA[i:], *m.FilePath)
	}
	dAtA[i] = 0x48
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.SMID))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Offset))
	if m.Buffer != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPaxosMsg(dAtA, i, uint64(len(m.Buffer)))
		i += copy(dAtA[i:], m.Buffer)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AcceptorStateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptorStateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.InstanceID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.PromiseID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.PromiseNodeID))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.AcceptedID))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.AcceptedNodeID))
	if m.AcceptedValue == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("AcceptedValue")
	} else {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPaxosMsg(dAtA, i, uint64(len(m.AcceptedValue)))
		i += copy(dAtA[i:], m.AcceptedValue)
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Checksum))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaxosNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Rid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Nodeid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SystemVariables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemVariables) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Gid))
	if len(m.MemberShip) > 0 {
		for _, msg := range m.MemberShip {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPaxosMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Version))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MasterVariables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterVariables) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.MasterNodeid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.LeaseTime))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaxosValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxosMsg(dAtA, i, uint64(m.SMID))
	if m.Value == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Value")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPaxosMsg(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchPaxosValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPaxosValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPaxosMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64PaxosMsg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PaxosMsg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPaxosMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Header) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.Gid))
	n += 1 + sovPaxosMsg(uint64(m.Rid))
	n += 1 + sovPaxosMsg(uint64(m.Cmdid))
	n += 1 + sovPaxosMsg(uint64(m.Version))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaxosMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.MsgType))
	n += 1 + sovPaxosMsg(uint64(m.InstanceID))
	n += 1 + sovPaxosMsg(uint64(m.NodeID))
	n += 1 + sovPaxosMsg(uint64(m.ProposalID))
	n += 1 + sovPaxosMsg(uint64(m.ProposalNodeID))
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovPaxosMsg(uint64(l))
	}
	n += 1 + sovPaxosMsg(uint64(m.PreAcceptID))
	n += 1 + sovPaxosMsg(uint64(m.PreAcceptNodeID))
	n += 1 + sovPaxosMsg(uint64(m.RejectByPromiseID))
	n += 1 + sovPaxosMsg(uint64(m.NowInstanceID))
	n += 1 + sovPaxosMsg(uint64(m.MinChosenInstanceID))
	n += 1 + sovPaxosMsg(uint64(m.LastChecksum))
	n += 1 + sovPaxosMsg(uint64(m.Flag))
	if m.SystemVariables != nil {
		l = len(m.SystemVariables)
		n += 1 + l + sovPaxosMsg(uint64(l))
	}
	if m.MasterVariables != nil {
		l = len(m.MasterVariables)
		n += 1 + l + sovPaxosMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckpointMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.MsgType))
	n += 1 + sovPaxosMsg(uint64(m.NodeID))
	n += 1 + sovPaxosMsg(uint64(m.Flag))
	n += 1 + sovPaxosMsg(uint64(m.UUID))
	n += 1 + sovPaxosMsg(uint64(m.Sequence))
	n += 1 + sovPaxosMsg(uint64(m.CheckpointInstanceID))
	n += 1 + sovPaxosMsg(uint64(m.Checksum))
	if m.FilePath != nil {
		l = len(*m.FilePath)
		n += 1 + l + sovPaxosMsg(uint64(l))
	}
	n += 1 + sovPaxosMsg(uint64(m.SMID))
	n += 1 + sovPaxosMsg(uint64(m.Offset))
	if m.Buffer != nil {
		l = len(m.Buffer)
		n += 1 + l + sovPaxosMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcceptorStateData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.InstanceID))
	n += 1 + sovPaxosMsg(uint64(m.PromiseID))
	n += 1 + sovPaxosMsg(uint64(m.PromiseNodeID))
	n += 1 + sovPaxosMsg(uint64(m.AcceptedID))
	n += 1 + sovPaxosMsg(uint64(m.AcceptedNodeID))
	if m.AcceptedValue != nil {
		l = len(m.AcceptedValue)
		n += 1 + l + sovPaxosMsg(uint64(l))
	}
	n += 1 + sovPaxosMsg(uint64(m.Checksum))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaxosNodeInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.Rid))
	n += 1 + sovPaxosMsg(uint64(m.Nodeid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemVariables) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.Gid))
	if len(m.MemberShip) > 0 {
		for _, e := range m.MemberShip {
			l = e.Size()
			n += 1 + l + sovPaxosMsg(uint64(l))
		}
	}
	n += 1 + sovPaxosMsg(uint64(m.Version))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MasterVariables) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.MasterNodeid))
	n += 1 + sovPaxosMsg(uint64(m.Version))
	n += 1 + sovPaxosMsg(uint64(m.LeaseTime))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaxosValue) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPaxosMsg(uint64(m.SMID))
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovPaxosMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPaxosValues) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovPaxosMsg(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPaxosMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPaxosMsg(x uint64) (n int) {
	return sovPaxosMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Header) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmdid", wireType)
			}
			m.Cmdid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmdid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("gid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("rid")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cmdid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaxosMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalNodeID", wireType)
			}
			m.ProposalNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreAcceptID", wireType)
			}
			m.PreAcceptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreAcceptID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreAcceptNodeID", wireType)
			}
			m.PreAcceptNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreAcceptNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectByPromiseID", wireType)
			}
			m.RejectByPromiseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejectByPromiseID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowInstanceID", wireType)
			}
			m.NowInstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowInstanceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinChosenInstanceID", wireType)
			}
			m.MinChosenInstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinChosenInstanceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChecksum", wireType)
			}
			m.LastChecksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastChecksum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVariables", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVariables = append(m.SystemVariables[:0], dAtA[iNdEx:postIndex]...)
			if m.SystemVariables == nil {
				m.SystemVariables = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVariables", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVariables = append(m.MasterVariables[:0], dAtA[iNdEx:postIndex]...)
			if m.MasterVariables == nil {
				m.MasterVariables = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MsgType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			m.UUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UUID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointInstanceID", wireType)
			}
			m.CheckpointInstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointInstanceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FilePath = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMID", wireType)
			}
			m.SMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SMID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffer = append(m.Buffer[:0], dAtA[iNdEx:postIndex]...)
			if m.Buffer == nil {
				m.Buffer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MsgType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NodeID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UUID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sequence")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptorStateData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptorStateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptorStateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromiseID", wireType)
			}
			m.PromiseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromiseID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromiseNodeID", wireType)
			}
			m.PromiseNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromiseNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedID", wireType)
			}
			m.AcceptedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptedID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedNodeID", wireType)
			}
			m.AcceptedNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptedNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedValue = append(m.AcceptedValue[:0], dAtA[iNdEx:postIndex]...)
			if m.AcceptedValue == nil {
				m.AcceptedValue = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InstanceID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PromiseID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PromiseNodeID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AcceptedID")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AcceptedNodeID")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AcceptedValue")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Checksum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaxosNodeInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodeid", wireType)
			}
			m.Nodeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodeid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Nodeid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemVariables) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemVariables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemVariables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberShip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberShip = append(m.MemberShip, &PaxosNodeInfo{})
			if err := m.MemberShip[len(m.MemberShip)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Gid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Version")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterVariables) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterVariables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterVariables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeid", wireType)
			}
			m.MasterNodeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterNodeid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseTime", wireType)
			}
			m.LeaseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MasterNodeid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Version")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaseTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaxosValue) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMID", wireType)
			}
			m.SMID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SMID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SMID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPaxosValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPaxosValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPaxosValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &PaxosValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxosMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxosMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaxosMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaxosMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxosMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPaxosMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPaxosMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPaxosMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPaxosMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaxosMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("paxos_msg.proto", fileDescriptorPaxosMsg) }

var fileDescriptorPaxosMsg = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0xce, 0x0f, 0xc9, 0x21, 0x21, 0x97, 0xb9, 0x11, 0xd7, 0x42, 0x57, 0xb9, 0x96, 0x85,
	0xae, 0xac, 0x0a, 0xa5, 0x12, 0x8b, 0xb6, 0x8b, 0x2e, 0xda, 0x90, 0x42, 0x23, 0x11, 0x1a, 0x39,
	0xc0, 0xb6, 0x1a, 0xec, 0x89, 0xe3, 0x36, 0xb6, 0x53, 0xcf, 0xa4, 0x2d, 0xab, 0x4a, 0x7d, 0x97,
	0xbe, 0x0b, 0x4b, 0x9e, 0xa0, 0x02, 0xb6, 0x7d, 0x89, 0x6a, 0xc6, 0x7f, 0x63, 0x87, 0x45, 0x77,
	0x3e, 0xdf, 0xf7, 0xcd, 0x99, 0x93, 0x33, 0xdf, 0x39, 0x81, 0xce, 0x12, 0x7f, 0x0d, 0xe9, 0x7b,
	0x9f, 0xba, 0xfd, 0x65, 0x14, 0xb2, 0x10, 0x35, 0x04, 0xe0, 0x53, 0x77, 0xaf, 0xeb, 0x86, 0x6e,
	0x28, 0xc0, 0xa7, 0xfc, 0x2b, 0xe6, 0x0d, 0x06, 0xf5, 0xb7, 0x04, 0x3b, 0x24, 0x42, 0xbb, 0x50,
	0x71, 0x3d, 0x47, 0x53, 0x74, 0xd5, 0xac, 0x0e, 0xaa, 0x37, 0x3f, 0xff, 0xdb, 0xb0, 0x38, 0xc0,
	0xf1, 0xc8, 0x73, 0x34, 0x55, 0xc6, 0x23, 0xcf, 0x41, 0x7b, 0x50, 0xb3, 0x7d, 0xc7, 0x73, 0xb4,
	0x8a, 0xae, 0x9a, 0xb5, 0x84, 0x89, 0x21, 0xd4, 0x83, 0xcd, 0xcf, 0x24, 0xa2, 0x5e, 0x18, 0x68,
	0x55, 0x5d, 0xc9, 0xd8, 0x14, 0x34, 0xee, 0xaa, 0xd0, 0x98, 0xf0, 0xc2, 0xc6, 0xd4, 0xe5, 0xe2,
	0x31, 0x75, 0xcf, 0xaf, 0x97, 0x44, 0x5c, 0x9e, 0x89, 0x13, 0x10, 0xed, 0x03, 0x8c, 0x02, 0xca,
	0x70, 0x60, 0x93, 0xd1, 0x50, 0x53, 0x75, 0x25, 0xab, 0x43, 0xc2, 0xd1, 0xbf, 0x50, 0x3f, 0x0b,
	0x1d, 0xae, 0xa8, 0x48, 0x8a, 0x04, 0xe3, 0x39, 0x26, 0x51, 0xb8, 0x0c, 0x29, 0x5e, 0x8c, 0x86,
	0xa2, 0xa6, 0x2c, 0x47, 0x8e, 0xa3, 0x03, 0xd8, 0x4e, 0xa3, 0x24, 0x57, 0x4d, 0x52, 0x96, 0x38,
	0xd4, 0x85, 0xda, 0x25, 0x5e, 0xac, 0x88, 0x56, 0xd7, 0x15, 0xb3, 0x65, 0xc5, 0x01, 0xfa, 0x1f,
	0xb6, 0x26, 0x11, 0x79, 0x6d, 0xdb, 0x64, 0xc9, 0x46, 0x43, 0x6d, 0x53, 0x4a, 0x20, 0x13, 0xa8,
	0x0f, 0x9d, 0x2c, 0x4c, 0x2e, 0x6b, 0x48, 0xda, 0x32, 0x89, 0x0e, 0x61, 0xc7, 0x22, 0x1f, 0x88,
	0xcd, 0x06, 0xd7, 0x93, 0x28, 0xf4, 0x3d, 0xca, 0x4f, 0x34, 0xa5, 0x13, 0xeb, 0x34, 0x7a, 0x02,
	0xed, 0xb3, 0xf0, 0x8b, 0xd4, 0x3c, 0x90, 0xf4, 0x45, 0x0a, 0x3d, 0x83, 0xbf, 0xc7, 0x5e, 0x70,
	0x34, 0x0f, 0x29, 0x09, 0xa4, 0x13, 0x5b, 0xd2, 0x89, 0xc7, 0x04, 0xc8, 0x84, 0xd6, 0x29, 0xa6,
	0xec, 0x68, 0x4e, 0xec, 0x8f, 0x74, 0xe5, 0x6b, 0x2d, 0x5d, 0x31, 0xdb, 0xc9, 0x81, 0x02, 0x83,
	0x34, 0xa8, 0x1e, 0x2f, 0xb0, 0xab, 0xb5, 0x25, 0x85, 0x40, 0x90, 0x09, 0x9d, 0xe9, 0x35, 0x65,
	0xc4, 0xbf, 0xc4, 0x91, 0x87, 0xaf, 0x16, 0x84, 0x6a, 0xdb, 0xa2, 0xa7, 0x65, 0x98, 0x2b, 0xc7,
	0x98, 0x32, 0x12, 0xe5, 0xca, 0x4e, 0xac, 0x2c, 0xc1, 0xc6, 0x2f, 0x15, 0xda, 0xe2, 0xea, 0x65,
	0xe8, 0x05, 0xec, 0x4f, 0x7c, 0x96, 0x3b, 0x48, 0xf6, 0x7a, 0xea, 0xa0, 0xb4, 0xfa, 0x8a, 0xe4,
	0xe7, 0xb8, 0x7a, 0x0d, 0xaa, 0x17, 0x17, 0xc2, 0x55, 0xf9, 0x29, 0x81, 0x20, 0x1d, 0x1a, 0x53,
	0xf2, 0x69, 0x45, 0x02, 0x9b, 0x68, 0x35, 0x89, 0xcd, 0x50, 0xf4, 0x02, 0xba, 0x79, 0x91, 0x52,
	0xdb, 0xeb, 0x52, 0xdb, 0x1f, 0x55, 0xf0, 0xdc, 0x59, 0xcf, 0x37, 0xa5, 0x8e, 0x66, 0x28, 0xda,
	0x83, 0xc6, 0xb1, 0xb7, 0x20, 0x13, 0xcc, 0xe6, 0xc2, 0x5a, 0x4d, 0x2b, 0x8b, 0x79, 0xcd, 0xd3,
	0x71, 0x62, 0xa0, 0xec, 0xd7, 0x70, 0x84, 0x77, 0xe1, 0xdd, 0x6c, 0x46, 0x09, 0x2b, 0x98, 0x25,
	0xc1, 0xd0, 0x2e, 0xd4, 0x07, 0xab, 0xd9, 0x8c, 0x44, 0xc2, 0x18, 0x2d, 0x2b, 0x89, 0x8c, 0x1f,
	0x2a, 0xec, 0xc4, 0x76, 0x0d, 0xa3, 0x29, 0xc3, 0x8c, 0x0c, 0x31, 0xc3, 0xa5, 0xc9, 0x95, 0x37,
	0x8b, 0x3c, 0xb9, 0x06, 0x34, 0x73, 0x47, 0xcb, 0xad, 0x6f, 0x16, 0x9c, 0x9c, 0x04, 0xd9, 0x90,
	0xe7, 0xba, 0x22, 0xc5, 0x6f, 0x8d, 0x4b, 0x21, 0x4e, 0xe9, 0x55, 0x24, 0x9c, 0xcf, 0x7a, 0x1a,
	0x65, 0xb3, 0x9e, 0x2b, 0x4b, 0x1c, 0xda, 0x87, 0x76, 0x8a, 0xa4, 0x33, 0xaf, 0x9a, 0x2d, 0xab,
	0x08, 0x96, 0xde, 0x44, 0x5d, 0x7f, 0x13, 0xe3, 0x0d, 0xb4, 0xc5, 0xde, 0x13, 0x69, 0x83, 0x59,
	0xc8, 0xb7, 0xab, 0x55, 0xde, 0xba, 0x96, 0xe7, 0xa4, 0x66, 0x2c, 0x2d, 0xde, 0x04, 0x33, 0xbe,
	0x2b, 0x6b, 0x13, 0xc3, 0x33, 0x9d, 0x94, 0x33, 0x9d, 0x78, 0x0e, 0x7a, 0x0e, 0x30, 0x26, 0xfe,
	0x15, 0x89, 0xa6, 0x73, 0x6f, 0xa9, 0xa9, 0x7a, 0xc5, 0xdc, 0x3a, 0xfc, 0xa7, 0x9f, 0xfe, 0x2d,
	0xf4, 0x0b, 0xe5, 0x58, 0x92, 0x94, 0xcf, 0xcb, 0x65, 0xb2, 0xc4, 0xe5, 0x6e, 0xa7, 0xa0, 0xf1,
	0x6d, 0x6d, 0x16, 0xf9, 0x32, 0x88, 0xa1, 0xa4, 0x76, 0xb9, 0x98, 0x02, 0x23, 0x27, 0x57, 0x1f,
	0x49, 0xce, 0x4d, 0x71, 0x4a, 0x30, 0x25, 0xe7, 0x9e, 0x4f, 0xc4, 0xf5, 0x69, 0x2f, 0x73, 0xd8,
	0x78, 0x09, 0x20, 0xaa, 0x8f, 0x9b, 0x9f, 0x5a, 0x5a, 0x9e, 0xed, 0xd8, 0xd2, 0xd9, 0xa2, 0x56,
	0xc5, 0xa3, 0xc5, 0x81, 0xf1, 0x0a, 0xfe, 0x1a, 0x60, 0x66, 0xcf, 0xf3, 0x14, 0x14, 0x1d, 0x40,
	0x3d, 0xfe, 0xd2, 0x14, 0xd1, 0xa7, 0x6e, 0xa9, 0x4f, 0x82, 0xb4, 0x12, 0xcd, 0xa0, 0x7b, 0x73,
	0xdf, 0xdb, 0xb8, 0xbd, 0xef, 0x6d, 0xdc, 0x3c, 0xf4, 0x94, 0xdb, 0x87, 0x9e, 0x72, 0xf7, 0xd0,
	0x53, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xc7, 0x65, 0x79, 0x83, 0x07, 0x00, 0x00,
}
